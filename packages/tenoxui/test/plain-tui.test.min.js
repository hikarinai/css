/*!
 * TenoxUI CSS Framework v0.5.1 [ https://tenoxui.web.app ]
 * copyright (c) 2024 nousantx
 * licensed under MIT [ https://github.com/nousantx/tenoxui/blob/main/LICENSE ]
 */
let property={p:["padding"]};let Classes=Object.keys(property).map((e=>`[class*="${e}-"]`));let AllClasses=document.querySelectorAll(Classes.join(", "));class newProp{constructor(e,t){if(typeof e!=="string"||!Array.isArray(t)){console.warn("Invalid arguments for newProp. Please provide a string for name and an array for values.");return}this[e]=t;Classes.push(`[class*="${e}-"]`);AllClasses=document.querySelectorAll(Classes.join(", "))}tryAdd(){if(!this||Object.keys(this).length===0){console.warn("Invalid newProp instance:",this);return}Object.assign(property,this)}}function addType(e,t){if(typeof e!=="string"){throw new Error("Types must be a string")}if(!Array.isArray(t)){throw new Error("Property must be an array")}new newProp(e,t).tryAdd()}class makeTenoxUI{constructor(e){this.element=e;this.styles=property}applyStyle(e,t,s){const r=this.styles[e];if(r){r.forEach((e=>{if(t.startsWith("[")&&t.endsWith("]")){const s=t.slice(1,-1);this.element.style[e]=`var(--${s})`}else{this.element.style[e]=`${t}${s}`}}))}}applyStyles(e){const t=e.match(/([a-zA-Z]+(?:-[a-zA-Z]+)*)-(-?(?:\d+(\.\d+)?)|(?:[a-zA-Z]+(?:-[a-zA-Z]+)*(?:-[a-zA-Z]+)*)|(?:\[[^\]]+\]))([a-zA-Z%]*)/);if(t){const e=t[1];const s=t[2];const r=t[4];this.applyStyle(e,s,r)}}applyMultiStyles(e){const t=e.split(/\s+/);t.forEach((e=>{this.applyStyles(e)}))}}function makeStyle(e,t){const s=(e,t)=>{const s=new makeTenoxUI(e);s.applyMultiStyles(t)};if(typeof t==="string"){const r=document.querySelectorAll(e);r.forEach((e=>s(e,t)))}else if(typeof t==="object"){Object.entries(t).forEach((([e,t])=>{const r=document.querySelectorAll(e);r.forEach((e=>s(e,t)))}))}else{console.warn(`Invalid styles format for "${e}". Make sure you provide style correctly`)}}function defineProps(e){Object.entries(e).forEach((([e,t])=>{if(Array.isArray(t)){const s=new newProp(e,t);s.tryAdd()}else{console.warn(`Invalid property values for "${e}". Make sure you provide values as an array.`)}}))}function makeStyles(e){Object.entries(e).forEach((([e,t])=>{makeStyle(e,t)}))}function tenoxui(){let e=Object.keys(property).map((e=>`[class*="${e}-"]`));let t=document.querySelectorAll(e.join(", "));t.forEach((e=>{const t=e.classList;const s=new makeTenoxUI(e);t.forEach((e=>{s.applyStyles(e)}))}))}tenoxui();